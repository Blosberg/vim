
= awk =

#---to print columns 1,2,3 from filename
 awk '{ print $1, $2, $3 }' filename.txt 

#---to sum over a column
awk '{s+=$3}END{print s}' file

#---to average over a column
awk '{s+=$3}END{print s/NR}' file

#----to merge columns of separate files:
pr -m -t -s\  test1 test2

#---how to average across columns (take the average of a row)
awk '{sum=0; for(i=1; i<=NF; i++){sum+=$i}; sum/=NF; print sum}' FILE

#--- you can then select whichever columns you want, eg:

> cat file1
one two three
one two three
one two three
one two three

> cat file2
four five six
four five six
four five six
four five six

> pr -m -t -s\  file1 file2 | gawk '{print $4,$5,$6,$1}'
four five six one
four five six one
four five six one
four five six one

#------------HOW TO PRINT THE 'i'TH COLUMN---------:

awk '{print $'$i'}' file

= sed =

check for individual subject pseudonyms in a paired-end database
ls *.fq.gz  | sed "s/_.\.fq\.gz//g" | uniq  | wc -l

= grep =

= cut =

cut -f[n] -d"[x]"
assumes your string is limited by characters "X", and you want to extract field n from it.


$echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f1 -d"_"


$ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f1 -d"_"
THIS
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f2 -d"_"
IS
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f4 -d"_"
STRING
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f4 -d"S"
TRING_OF_CHARACTER
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f1 -d"S"
THI
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f2 -d"S"
