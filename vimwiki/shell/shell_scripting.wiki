#!/bin/bash


# see also [[shell_variables]] --manipulate strings, check length, etc.

= for loops =

for VAR in file1 file2 file3
do
	command1 on $VARIABLE
	command2
	commandN
done

== seq examples ==
for i in {1..5}
do
   echo "Welcome $i times"
done

# skip every other val.
for i in {START..END..STEP}
  do
     echo "Welcome $i times"
 done

== zero padding numbers ==

printf "%03d\n" 5
005


== c-like ==

for (( c=1; c<=5; c++ ))
do
   echo "Welcome $c times"
done


== al together ==
FILES="$@"
for f in $FILES
do
  # if .bak backup file exists, read next file
  if [ -f ${f}.bak ]
  then
    echo "Skiping $f file..."
    continue  # read next file and skip the cp command
    fi
      # we are here means no backup file exists, just use cp command to copy file
	/bin/cp $f $f.bak
done


= IF/ELSE =
read -p "Enter your marks: " marks

if [ $marks -ge 80 ]
then
    echo "Very Good"

elif [ $marks -ge 50 ]
then
    echo "Good"

elif [ $marks -ge 33 ]
then
    echo "Just Satisfactory"

else
    echo "Not OK"

fi

# Check if two files differ:
if [ $(diff map_to_windows.sh tmp  | wc -l) != 0 ]
then
  echo "hello diff"
else
  echo "No diff"
fi

= ARRAYS; command line args =
# check num of comand line args
if [ $# -ne 1 ]; then
        echo "Please provide an input file"
        exit
fi

# assign from CL args. e.g.:
fin=$1

# cycle thorugh all CL args
for var in "$@"
do
    echo "$var"
done


= check for existence of files =
# MIND THE SPACES!
if [ -e ${fin} ]
then
            echo "unzipping file" ${fin}
    else
            echo "no such file"   ${fin}  " Exiting."
            exit
fi

if [ ! -f ${fin} ]
   then
          echo "${fin} does not exist."
   else
          echo "${fin} exists."

   fi
