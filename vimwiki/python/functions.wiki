# Template func: default values must come at the the end.

def my_func( non_default1, non_default2, default="default_value", default2="other_defval"):
    """Doc string that explains useful important stuff about function...
    can be multiple lines long...
    """
    print("Hello, %s , From My Function!, I wish you %s"%(non_default1, non_default2, defaulted))
    return()

 = Function object: =
>>> A=my_func
# (Without the brackets) sets A equal to the function object my_func.
>>> A()
# will then initiate execution.

 = Defaults: =
>>> my_func( non_default1, non_default2 )
or
>>> my_func( non_default1, non_default2, default )
or
>>> my_func( non_default1, non_default2, default2="something_else" )

point being: the non-defaulted are provided in order. The defaulted _can_ follow order, or can be directly specified.

 = Multiple args: =
https://www.learnpython.org/en/Multiple_Function_Arguments

def foo(first, second, third, *therest):
   return(len(therest) )

len( foo(1,2,3,4,5) ) --> 2

Here, "therest" variable is a list of variables, which receives all arguments which were given to the "foo" function after the first 3 arguments. **IN ORDER**

If you want to make these options order-independent, then provide an additional asterix:

def bar(first, second, third, **options):
    if options.get("action") == "sum":
            print("The sum is: %d" %(first + second + third))

    if options.get("number") == "first":
            return first

result = bar(1, 2, 3, action = "sum", number = "first")
print("Result: %d" %(result))

 = Partial functions: =
# These are the opposite, in a sense that you want to derive a simpler function
# from a more complex one, by fixing the input values (from left to right)

from functools import partial

def multiply3(x,y,z):
        return x * y * z

# create a new function that multiplies by 2
dbl = partial(multiply3, 1.5, 4)
# The x value is now always 1.5, and the y value is fixed at 4
# you must supply the z val.
# print(dbl(4))

 = Methods: =
# Methods are like functions but confined to within classes:
class Pet(object):
   def my_method(self):
      print("I am a Cat")
cat = Pet()
cat.my_method()

# because the method is called on an object, it can access the data within it.
# Methods can also modify the objectâ€™s state.
# Python functions generally don't modify class objects passed to it.

 = Decorators: =
# Takes existing functions as inputs, and outputs a modified version of the function
# to redefine the function in a systematic way n

# Create decorator function that operates on a func and returns a func:
def add_extra_half_and_quarter(func_in):
    # Define the function to be returned:
    def func_out(x):
        x = x+0.5
        # Call the original func with modified arguments:
        return (func_in(x) + 0.25)
    return func_out

@add_extra_half_and_quarter
def add_one(x):
    return x+1

>>>
>>> add_one(7)
8.75
>>>

