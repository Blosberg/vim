# Check for templates at: https://matplotlib.org/devdocs/gallery/

= setup fig, ax =
import matplotlib.pyplot as plt
# pyplot is a collection of
# functions that make matplotlib work like matlab

plt.subplots() returns a tuple: (figure , axes) object(s).
fig, ax = plt.subplots()
is the same as this:
fig = plt.figure()
ax = fig.add_subplot(111)

fig  lets yous change figure-level attributes or save (e.g. fig.savefig('yourfilename.png')).
axes objects are for current plot:

%matplotlib inline
%matplotlib notebook
# produce plots locally with built-in  magic command
# for Ipython (jupyter notebooks):
# (The latter makes for interactive plots)

plt.subplot( nrows, ncols, activeplotindex)
#                          ^ The one you want to work with *now*


= matlab style =
plt.plot( xvals,
          yvals,
          c= 'k')
# to go through multiple subplots:
# logplots:
plt.semilogx()/semilogy()/loglog()
# or later:
plt.yscale("log")

= object-oriented =
fig, axes = plt.subplots( nrows = 2,
                          ncols = 2)
# ^ this is tuple-unpacking
axes[0][1].plot( month_number,
                 interest_paid,
                 c= 'k');
#    ^  ^ defines grid-point plot to invoke
axes.plot(month_number, principal_paid, c = 'b');
axes.[set_title | set_xlabel | set_ylabel ]('textstr')

= subplots sharing axes =
# check: https://matplotlib.org/devdocs/gallery/subplots_axes_and_figures/subplots_demo.html
#
fig, axs = plt.subplots(3,
              sharex=[True|"col"],  # line-up x-tick marks [for all, just by col]
              sharey=[True|"row"],  # ensure y-scale is consistent [all |by row]
              gridspec_kw={'hspace': 0, "wspace":0 }
              # ^ control spacing between plots vertically/horizontally
              )
fig.suptitle('Sharing both axes')
axs[0].plot(x, y ** 2)
axs[1].plot(x, 0.3 * y, 'o')
axs[2].plot(x, y, '+')


= Decorate: legend, axis label, range/domain, markersize color etc =
plt.plot( x, y,
          "bo-",
          linewidth=4,
          markersize=15,
          label="label1"... )

plt.legend("upper left")
plt.axis([xmin, xmax, ymin, ymax])
plt.[x/y]label("$X$")
# N.B. plt also knows latex

plt.savefig("myplot.pdf")
# file format based on extension

= histograms =
plt.hist( degree_sequence,
          histtype="step",
          bins=bins)

= Dendrogram hierarchical clustering =

import numpy as np
import matplotlib.pyplot as plt

X = np.array([[5,3],
    [10,15],
    [15,12],
    [24,10],
    [30,30],
    [85,70],
    [71,80],
    [60,78],
    [70,55],
    [80,91],])



labels = range(1, 11)
plt.figure(figsize=(10, 7))
plt.subplots_adjust(bottom=0.1)
plt.scatter(X[:,0],X[:,1], label='True Position')

# create scatter plot with points labelled.
for label, x, y in zip(labels, X[:, 0], X[:, 1]):
    plt.annotate(
        label,
        xy=(x, y), xytext=(-3, 3),
        textcoords='offset points', ha='right', va='bottom')
plt.show()

# create dendrogram
plt.figure(figsize=(10, 7))
dendrogram(linked,
            orientation='top',
            labels=labelList,
            distance_sort='descending',
            show_leaf_counts=True)
plt.show()

= 3d plots, perspective, heatmaps =

= beeswarm + boxplot =

import seaborn as sns
sns.set_style("whitegrid")
tips = sns.load_dataset("tips")
sns.swarmplot(x="day", y="total_bill", data=tips)
sns.boxplot(x="day", y="total_bill", data=tips,
        showcaps=False,boxprops={'facecolor':'None'},
        showfliers=False,whiskerprops={'linewidth':0})

# also
ax.boxplot

= heatmap =
xx1, xx2 = np.meshgrid( np.arange(min,max,step), np.arange(min,max,step) )
... Z = [prob prediction reshaped to that same matrix shape...]
fig, ax = plt.fig()
CS   = ax.contourf(xx1, xx2, Z)
cbar = plt.colorbar(CS)

fig_persist_p05_pos, ax_persist_p05_pos = plt.subplots()
sns.heatmap( persistence_p05_pos,
             cmap ="coolwarm",
             linewidths = 0.30,
             annot = True,
             tit)
ax_persist_p05_pos.set_title("DKO-CreCtrl pos sigdiff; p=0.05, D=0.15\n persistence across phases")
   == seaborn  ==

   %matplotlib inline
   import numpy as np
   import os
   import seaborn as sns
   import matplotlib.pyplot as plt

   data = np.random.randn(10,12)

   ax = plt.axes()
   sns.heatmap(data, ax = ax)

   ax.set_title('lalala')
   plt.show()

= 3d plot  =

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax  = fig.add_subplot(111,projection="3d")
ax.scatter(X[:,0], X[:,1], y, c=y)
ax.set_xlabel("$x_1$")
ax.set_ylabel("$x_2$")
ax.set_zlabel("$y$")

= Venn Diagrams =

from matplotlib_venn import venn2, venn2_circles
from matplotlib import pyplot as plt

Subsets_in=( 319 , 743, 787)
# ( A_excl, B_excl, shared)

plt.figure(figsize=(4,4))
out = venn2( subsets = Subsets_in,
       set_labels = ('Exe', 'VE') ,
       set_colors=('red', 'blue'),
       alpha = 0.9)
venn2_circles( subsets = Subsets_in )
plt.title("Hyper CGIs --EpiHypo", fontsize=22)

for text in out.set_labels:
    text.set_fontsize(18)

plt.savefig('OutPath.png')


= Folium: maps =
Folium seems like a neat package for plotting actual map data with lattitude, and longitude coordinates, etc.G

= Bokeh: interactive visualizations =

