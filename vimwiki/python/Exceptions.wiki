= Using with =
# "with" makes it possible to factor out standard uses of try/finally statements.

with EXPR as VAR:
    BLOCK


= Generic Exceptions in PYTHON:=
# Template:
try:
    do_somethingi_that_might_go_wrong()
    perhaps_over_multiple_lines
except DefinedError1:
    do_alt_1
except DefinedError2:
    do_alt_2

e.g.:

try:
   os.symlink(src,target)
except FileExistsError:
   pass

 = Define your own exceptions:  =
class Custom_error(BaseException):
    pass
# or:
class Error(Exception):
   """Base class for other exceptions"""
   pass
class ValueTooSmallError(Error):
   """Raised when the input value is too small"""
   pass
class ValueTooLargeError(Error):
   """Raised when the input value is too large"""
   pass


 = Then use them as follows:  =
# 
# user guesses a number until he/she gets it right
# you need to guess this number
number = 10
while True:
   try:
       i_num = int(input("Enter a number: "))
       if i_num < number:
           raise ValueTooSmallError
       elif i_num > number:
           raise ValueTooLargeError
       break
   except ValueTooSmallError:
       print("This value is too small, try again!")
       print()
   except ValueTooLargeError:
       print("This value is too large, try again!")
       print()
print("Congratulations! You guessed it correctly.")

 = Assertions:  =
# hard breaks can also be established with assertions. e.g.:
# assert [Condition], "Error message"

assert (Temperature >= 0), "Colder than absolute zero!"

# If condition is false, then an AssertionError exception is raised.k
