== Staging ==

# stage interactively, and can lead to patch more where you select only certain lines:
git add [--interactive | -i]

also git add [ -p | --patch ]

git stash -p
git reset [[-p]]
git checkout -p
git commit -p

== Commits ==
git commit -am "Commit message"
# the a option stages and commits all changes to tracked files.

git show [shaID]
# shows all changes made in a commit

== Ancestry ==

HEAD^ shows the parent of head
<SHA>^ is the parent of the commit <SHA>
# Grandparents: ^^==~2; ^^^==~3, etc
HEAD^^ = HEAD~2 

== Branchs ==
git checkout -b [new_branch_name] [starting_point]

-u sets the tracking option with set-upstream... look more into this later.

== merging ==

git branch --merged 
# shows you only the branches whose tips are included in the ancestry of the current branch
git branch --no-merged 
# The opposite (unmerged)
git branch -m [oldname] newname
#rename "m"==move

In a real merge (i.e. not a fast-forward merge) intermediate commits need to be reconciled, and conflicts are possible.

You can fix them manually and then git commit once conflicts are resolved.
Alternatively, git mergetool [--tool=<tool>]

This will, by default, launch [[../vim/vimdiff#Mergetool|vimdiff]] to resolve the conflict(s).

== Review ==
git show [commit] --> changes
git ls-tree [tree-ish ob] [pattern matching]

git log --since(after)=YYYY-MM-DD --until(before)=YYYY-MM-DD
        --since=3.days "5 weeks ago"
        --author="Bre"
        --grep="stringtomatch"
        134hva..HEAD # from commit 1234hva up to HEAD
        README # (just changes that affected README)
        --stat #(stats on changes) 
git log --oneline --graph --all --decorate

== resets ==
get reset --...
--soft just moves HEAD; doesn't change staging tree or cwd
--mixed undoes whatever is staged, replaces it with repo. Doesn't affect the cwd. (default)
--hard moves HEAD, and changes both staging and cwd to match repo at that time. MAKE EVERYTHING LIKE IT WAS THEN.
