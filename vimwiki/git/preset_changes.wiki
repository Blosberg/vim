Options:
= Diff files =

# Create a diff file of specific changes
git diff <fromcommitSHA> <tocommitSHA>  > output.diff

# import it and apply it to your local repo
git apply input.diff
# N.B. Doesn't commit. Use the SHA *before* the commit you want (check this)
# It will need to be compatible with the current state of the working dir or
# you will get patch failed.


= Format patches =

git format-patch <from-comit>..<to-commit>
# leaving out either range: HEAD is implied

# or export all commits on current branch since it diverged from master git
git format-patch master
# HEAD is implied as the second range, otherwise, add # works its way backwards
# until it gets to master

 == options ==
-1 signifies single commit
-o <directory>
--stdout > feature.patch

 == application ==
 
 # Author, message and changes are extracted from message
 git am <dir>/0001-some-name.patch
 git am <dir>*.patch # apply them all.
 
 # Unlike git apply, changes are committed.

= Cherry picking =
# apply the changes of a particular commit (provided as an argument) to the
# current state of the repo You don't want to merge, because you don't want
# the whole branch; just the changes of that one commit 

git cherry-pick <SHA1>[..<SHA2>]

# The second one creates a range if you want to apply multiple change sets
# in series if a conflict is encountered mergetool will resolve it just 
# like a merge conflict
 
 == options ==
 *  --edit # change the commit message 
 --continue # after resolving conflic
 
 
